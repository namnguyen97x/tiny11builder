name: Build Tiny11 ISO

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'maker'
        type: choice
        options:
          - maker
          - core
      iso_url:
        description: 'Windows ISO URL (leave empty to use default Windows 11 25H2 ISO)'
        required: false
        type: string
      remove_defender:
        description: '⚠️ MAKER ONLY (ignored for core): Remove Windows Defender (default: no)'
        required: false
        default: 'no'
        type: choice
        options:
          - yes
          - no
      remove_ai:
        description: '⚠️ MAKER ONLY (ignored for core): Remove AI/Copilot components (default: yes)'
        required: false
        default: 'yes'
        type: choice
        options:
          - yes
          - no
      remove_edge:
        description: '⚠️ MAKER ONLY (ignored for core): Remove Microsoft Edge browser (default: yes)'
        required: false
        default: 'yes'
        type: choice
        options:
          - yes
          - no
      remove_store:
        description: '⚠️ MAKER ONLY (ignored for core): Remove Microsoft Store (default: yes)'
        required: false
        default: 'yes'
        type: choice
        options:
          - yes
          - no
  push:
    branches:
      - main
    paths:
      - '*.ps1'
      - '.github/workflows/*.yml'
  release:
    types: [published]

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 180
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup PowerShell
        shell: pwsh
        run: |
          $PSVersionTable
          Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
          
      - name: Download and Mount Windows ISO
        shell: pwsh
        env:
          ISO_URL_SECRET: ${{ secrets.ISO_URL }}
          ISO_URL_INPUT: ${{ github.event.inputs.iso_url }}
          DEFAULT_ISO_URL: 'https://software-static.download.prss.microsoft.com/dbazure/888969d5-f34g-4e03-ac9d-1f9786c66749/26200.6584.250915-1905.25h2_ge_release_svc_refresh_CLIENT_CONSUMER_x64FRE_en-us.iso'
        run: |
          $ErrorActionPreference = 'Stop'
          
          # Determine ISO source
          # Priority: Input ISO_URL (if not empty) > Secret ISO_URL > Default URL
          $isoUrl = $null
          
          # Check if ISO_URL_INPUT is provided and not empty
          if ($env:ISO_URL_INPUT -and $env:ISO_URL_INPUT.Trim() -ne '') {
            Write-Host "Using ISO URL from workflow input..."
            $isoUrl = $env:ISO_URL_INPUT.Trim()
          } elseif ($env:ISO_URL_SECRET -and $env:ISO_URL_SECRET.Trim() -ne '') {
            Write-Host "Using ISO URL from repository secret..."
            $isoUrl = $env:ISO_URL_SECRET.Trim()
          } else {
            Write-Host "ISO URL input is empty, using default Windows 11 25H2 ISO URL..."
            $isoUrl = $env:DEFAULT_ISO_URL
          }
          
          $isoFilePath = "$env:RUNNER_TEMP\windows.iso"
          
          Write-Host "Downloading Windows ISO from: $isoUrl"
          Write-Host "This may take a while depending on your connection speed..."
          
          try {
            Invoke-WebRequest -Uri $isoUrl -OutFile $isoFilePath -UseBasicParsing
            Write-Host "✓ ISO downloaded successfully" -ForegroundColor Green
          } catch {
            Write-Error "Failed to download ISO: $_"
            exit 1
          }
          
          # Verify ISO file exists
          if (-not (Test-Path $isoFilePath)) {
            Write-Error "ISO file not found at: $isoFilePath"
            exit 1
          }
          
          $isoSize = (Get-Item $isoFilePath).Length / 1GB
          Write-Host "Downloaded ISO size: $([math]::Round($isoSize, 2)) GB"
          
          Write-Host "Mounting ISO file: $isoFilePath"
          
          # Mount ISO and get drive letter
          try {
            $mountResult = Mount-DiskImage -ImagePath $isoFilePath -PassThru -ErrorAction Stop
            $volume = $mountResult | Get-Volume
            $isoDriveLetter = $volume.DriveLetter
            
            if ($isoDriveLetter) {
              $isoDrive = "$isoDriveLetter`:"
              Write-Host "✓ ISO mounted successfully to drive: $isoDrive" -ForegroundColor Green
              echo "ISO_DRIVE=$isoDrive" >> $env:GITHUB_ENV
              echo "ISO_FILE_PATH=$isoFilePath" >> $env:GITHUB_ENV
            } else {
              Write-Error "Failed to get drive letter from mounted ISO"
              exit 1
            }
          } catch {
            Write-Error "Failed to mount ISO: $_"
            exit 1
          }
          
      - name: Build Tiny11 ISO
        shell: pwsh
        env:
          BUILD_TYPE: ${{ github.event.inputs.build_type || 'maker' }}
          REMOVE_DEFENDER: ${{ github.event.inputs.remove_defender || 'no' }}
          REMOVE_AI: ${{ github.event.inputs.remove_ai || 'yes' }}
          REMOVE_EDGE: ${{ github.event.inputs.remove_edge || 'yes' }}
          REMOVE_STORE: ${{ github.event.inputs.remove_store || 'yes' }}
        run: |
          $ErrorActionPreference = 'Stop'
          
          # Get ISO drive from mounted ISO
          $isoDrive = $env:ISO_DRIVE
          if (-not $isoDrive) {
            Write-Error "ISO drive not set. Mount step may have failed."
            exit 1
          }
          
          # Scratch drive will use runner temp or current directory
          $scratchDrive = $PSScriptRoot
          
          Write-Host "Building Tiny11 ISO..."
          Write-Host "ISO Drive: $isoDrive"
          Write-Host "Scratch Drive: $scratchDrive"
          Write-Host "Build Type: $env:BUILD_TYPE"
          
          # Build arguments
          $buildArgs = @()
          
          # Extract drive letter (remove colon)
          if ($isoDrive -match '^([A-Z]):$') {
            $buildArgs += '-ISO', $Matches[1]
          } else {
            Write-Error "Invalid ISO drive format: $isoDrive"
            exit 1
          }
          
          # Determine script to run
          $buildType = $env:BUILD_TYPE
          $scriptName = if ($buildType -eq 'core') { 'tiny11Coremaker.ps1' } else { 'tiny11maker.ps1' }
          
          # Add NonInteractive flag for CI/CD
          $buildArgs += '-NonInteractive'
          
          # Add optional debloat parameters only for maker
          if ($buildType -eq 'maker') {
            Write-Host "Adding optional debloat parameters for maker..."
            
            # Use environment variables with defaults
            $removeDefender = if ($env:REMOVE_DEFENDER) { $env:REMOVE_DEFENDER } else { 'no' }
            $removeAI = if ($env:REMOVE_AI) { $env:REMOVE_AI } else { 'yes' }
            $removeEdge = if ($env:REMOVE_EDGE) { $env:REMOVE_EDGE } else { 'yes' }
            $removeStore = if ($env:REMOVE_STORE) { $env:REMOVE_STORE } else { 'yes' }
            
            $buildArgs += '-RemoveDefender', $removeDefender
            $buildArgs += '-RemoveAI', $removeAI
            $buildArgs += '-RemoveEdge', $removeEdge
            $buildArgs += '-RemoveStore', $removeStore
            
            Write-Host "Debloat options: Defender=$removeDefender, AI=$removeAI, Edge=$removeEdge, Store=$removeStore"
          } else {
            Write-Host "Core maker selected - optional debloat parameters ignored (core has fixed settings)"
          }
          
          Write-Host "Running: $scriptName"
          Write-Host "Arguments: $($buildArgs -join ' ')"
          
          # Run the builder script
          & ".\$scriptName" @buildArgs
          
          # Check if ISO was created
          $isoPath = Join-Path $PSScriptRoot "tiny11.iso"
          if (Test-Path $isoPath) {
            Write-Host "ISO created successfully: $isoPath"
            $isoSize = (Get-Item $isoPath).Length / 1GB
            Write-Host "ISO size: $([math]::Round($isoSize, 2)) GB"
          } else {
            Write-Error "ISO was not created at expected path: $isoPath"
            exit 1
          }
          
      - name: Upload ISO artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: tiny11-iso-${{ github.event.inputs.build_type || 'maker' }}-${{ github.run_number }}
          path: |
            tiny11.iso
            *.log
          retention-days: 7
          compression-level: 0
          
      - name: Create Release
        if: github.event_name == 'release' && github.event.action == 'published'
        shell: pwsh
        run: |
          $isoPath = "tiny11.iso"
          if (Test-Path $isoPath) {
            Write-Host "Preparing release asset..."
            $isoSize = (Get-Item $isoPath).Length / 1GB
            Write-Host "ISO size: $([math]::Round($isoSize, 2)) GB"
            
            # Note: Actual release upload would be handled by release action
            # This step just prepares the file
          }
          
      - name: Cleanup
        if: always()
        shell: pwsh
        env:
          ISO_FILE_PATH: ${{ env.ISO_FILE_PATH }}
        run: |
          # Unmount ISO if we mounted it
          if ($env:ISO_FILE_PATH) {
            Write-Host "Unmounting ISO: $env:ISO_FILE_PATH"
            try {
              Get-DiskImage | Where-Object { $_.ImagePath -eq $env:ISO_FILE_PATH } | Dismount-DiskImage -ErrorAction Stop
              Write-Host "✓ ISO unmounted successfully" -ForegroundColor Green
            } catch {
              Write-Warning "Failed to unmount ISO: $_"
            }
            
            # Cleanup temporary ISO file if it was downloaded
            if ($env:ISO_FILE_PATH -like "*RUNNER_TEMP*") {
              Write-Host "Removing temporary ISO file..."
              Remove-Item -Path $env:ISO_FILE_PATH -Force -ErrorAction SilentlyContinue
            }
          }
