name: Build Tiny11 ISO

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'maker'
        type: choice
        options:
          - maker
          - core
      iso_url:
        description: 'Windows ISO URL (optional, use ISO_URL secret if not provided)'
        required: false
        type: string
      iso_path:
        description: 'Local ISO file path (for self-hosted runners, optional)'
        required: false
        type: string
      enable_debloat:
        description: 'Enable debloat features'
        required: true
        default: 'yes'
        type: choice
        options:
          - yes
          - no
      remove_appx:
        description: 'Remove AppX packages'
        required: true
        default: 'yes'
        type: choice
        options:
          - yes
          - no
      remove_edge:
        description: 'Remove Edge'
        required: true
        default: 'yes'
        type: choice
        options:
          - yes
          - no
      remove_onedrive:
        description: 'Remove OneDrive'
        required: true
        default: 'yes'
        type: choice
        options:
          - yes
          - no
      disable_telemetry:
        description: 'Disable Telemetry'
        required: true
        default: 'yes'
        type: choice
        options:
          - yes
          - no
  push:
    branches:
      - main
    paths:
      - '*.ps1'
      - '.github/workflows/*.yml'
  release:
    types: [published]

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 180
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup PowerShell
        shell: pwsh
        run: |
          $PSVersionTable
          Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
          
      - name: Download and Mount Windows ISO
        shell: pwsh
        env:
          ISO_URL_SECRET: ${{ secrets.ISO_URL }}
          ISO_URL_INPUT: ${{ github.event.inputs.iso_url }}
          ISO_PATH_INPUT: ${{ github.event.inputs.iso_path }}
        run: |
          $ErrorActionPreference = 'Stop'
          
          # Determine ISO source
          $isoFilePath = $null
          
          # Priority: Input ISO_URL > Secret ISO_URL > Input ISO_PATH
          if ($env:ISO_URL_INPUT) {
            Write-Host "Using ISO URL from workflow input..."
            $isoFilePath = "$env:RUNNER_TEMP\windows.iso"
            Write-Host "Downloading Windows ISO from: $env:ISO_URL_INPUT"
            Invoke-WebRequest -Uri $env:ISO_URL_INPUT -OutFile $isoFilePath -UseBasicParsing
          } elseif ($env:ISO_URL_SECRET) {
            Write-Host "Using ISO URL from repository secret..."
            $isoFilePath = "$env:RUNNER_TEMP\windows.iso"
            Write-Host "Downloading Windows ISO from secret URL..."
            Invoke-WebRequest -Uri $env:ISO_URL_SECRET -OutFile $isoFilePath -UseBasicParsing
          } elseif ($env:ISO_PATH_INPUT -and (Test-Path $env:ISO_PATH_INPUT)) {
            Write-Host "Using local ISO file path: $env:ISO_PATH_INPUT"
            $isoFilePath = $env:ISO_PATH_INPUT
          } else {
            Write-Error "No ISO source provided. Please set ISO_URL secret or provide iso_url/iso_path input."
            exit 1
          }
          
          # Verify ISO file exists
          if (-not (Test-Path $isoFilePath)) {
            Write-Error "ISO file not found at: $isoFilePath"
            exit 1
          }
          
          Write-Host "Mounting ISO file: $isoFilePath"
          
          # Mount ISO and get drive letter
          try {
            $mountResult = Mount-DiskImage -ImagePath $isoFilePath -PassThru -ErrorAction Stop
            $volume = $mountResult | Get-Volume
            $isoDriveLetter = $volume.DriveLetter
            
            if ($isoDriveLetter) {
              $isoDrive = "$isoDriveLetter`:"
              Write-Host "✓ ISO mounted successfully to drive: $isoDrive" -ForegroundColor Green
              echo "ISO_DRIVE=$isoDrive" >> $env:GITHUB_ENV
              echo "ISO_FILE_PATH=$isoFilePath" >> $env:GITHUB_ENV
            } else {
              Write-Error "Failed to get drive letter from mounted ISO"
              exit 1
            }
          } catch {
            Write-Error "Failed to mount ISO: $_"
            exit 1
          }
          
      - name: Build Tiny11 ISO
        shell: pwsh
        env:
          BUILD_TYPE: ${{ github.event.inputs.build_type || 'maker' }}
          ENABLE_DEBLOAT: ${{ github.event.inputs.enable_debloat || 'yes' }}
          REMOVE_APPX: ${{ github.event.inputs.remove_appx || 'yes' }}
          REMOVE_EDGE: ${{ github.event.inputs.remove_edge || 'yes' }}
          REMOVE_ONEDRIVE: ${{ github.event.inputs.remove_onedrive || 'yes' }}
          DISABLE_TELEMETRY: ${{ github.event.inputs.disable_telemetry || 'yes' }}
        run: |
          $ErrorActionPreference = 'Stop'
          
          # Get ISO drive from mounted ISO
          $isoDrive = $env:ISO_DRIVE
          if (-not $isoDrive) {
            Write-Error "ISO drive not set. Mount step may have failed."
            exit 1
          }
          
          # Scratch drive will use runner temp or current directory
          $scratchDrive = $PSScriptRoot
          
          Write-Host "Building Tiny11 ISO..."
          Write-Host "ISO Drive: $isoDrive"
          Write-Host "Scratch Drive: $scratchDrive"
          Write-Host "Build Type: $env:BUILD_TYPE"
          
          # Build arguments
          $buildArgs = @()
          
          # Extract drive letter (remove colon)
          if ($isoDrive -match '^([A-Z]):$') {
            $buildArgs += '-ISO', $Matches[1]
          } else {
            Write-Error "Invalid ISO drive format: $isoDrive"
            exit 1
          }
          
          # Add debloat parameters
          $buildArgs += '-EnableDebloat', $env:ENABLE_DEBLOAT
          $buildArgs += '-RemoveAppx', $env:REMOVE_APPX
          $buildArgs += '-RemoveEdge', $env:REMOVE_EDGE
          $buildArgs += '-RemoveOneDrive', $env:REMOVE_ONEDRIVE
          $buildArgs += '-DisableTelemetry', $env:DISABLE_TELEMETRY
          
          # Determine script to run
          $scriptName = if ($env:BUILD_TYPE -eq 'core') { 'tiny11Coremaker.ps1' } else { 'tiny11maker.ps1' }
          
          Write-Host "Running: $scriptName"
          Write-Host "Arguments: $($buildArgs -join ' ')"
          
          # Run the builder script
          & ".\$scriptName" @buildArgs
          
          # Check if ISO was created
          $isoPath = Join-Path $PSScriptRoot "tiny11.iso"
          if (Test-Path $isoPath) {
            Write-Host "ISO created successfully: $isoPath"
            $isoSize = (Get-Item $isoPath).Length / 1GB
            Write-Host "ISO size: $([math]::Round($isoSize, 2)) GB"
          } else {
            Write-Error "ISO was not created at expected path: $isoPath"
            exit 1
          }
          
      - name: Upload ISO artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: tiny11-iso-${{ github.event.inputs.build_type || 'maker' }}-${{ github.run_number }}
          path: |
            tiny11.iso
            *.log
          retention-days: 7
          compression-level: 0
          
      - name: Create Release
        if: github.event_name == 'release' && github.event.action == 'published'
        shell: pwsh
        run: |
          $isoPath = "tiny11.iso"
          if (Test-Path $isoPath) {
            Write-Host "Preparing release asset..."
            $isoSize = (Get-Item $isoPath).Length / 1GB
            Write-Host "ISO size: $([math]::Round($isoSize, 2)) GB"
            
            # Note: Actual release upload would be handled by release action
            # This step just prepares the file
          }
          
      - name: Cleanup
        if: always()
        shell: pwsh
        env:
          ISO_FILE_PATH: ${{ env.ISO_FILE_PATH }}
        run: |
          # Unmount ISO if we mounted it
          if ($env:ISO_FILE_PATH) {
            Write-Host "Unmounting ISO: $env:ISO_FILE_PATH"
            try {
              Get-DiskImage | Where-Object { $_.ImagePath -eq $env:ISO_FILE_PATH } | Dismount-DiskImage -ErrorAction Stop
              Write-Host "✓ ISO unmounted successfully" -ForegroundColor Green
            } catch {
              Write-Warning "Failed to unmount ISO: $_"
            }
            
            # Cleanup temporary ISO file if it was downloaded
            if ($env:ISO_FILE_PATH -like "*RUNNER_TEMP*") {
              Write-Host "Removing temporary ISO file..."
              Remove-Item -Path $env:ISO_FILE_PATH -Force -ErrorAction SilentlyContinue
            }
          }
