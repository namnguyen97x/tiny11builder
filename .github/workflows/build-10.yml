name: Build Tiny10 ISO

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Windows 10 build type'
        required: true
        default: 'win10'
        type: choice
        options:
          - win10
          - win10-core
          - win10-nano
      iso_url:
        description: 'Windows 10 ISO URL (optional)'
        required: false
        type: string
      version_selector:
        description: 'Windows edition (default: Auto)'
        required: false
        default: 'Auto'
        type: choice
        options:
          - Auto
          - Pro
          - Home
          - ProWorkstations
      remove_defender:
        description: 'Remove Windows Defender? (default: false)'
        required: false
        default: 'false'
        type: choice
        options:
          - true
          - false
      remove_edge:
        description: 'Remove Microsoft Edge? (default: true)'
        required: false
        default: 'true'
        type: choice
        options:
          - true
          - false
      remove_store:
        description: 'Remove Microsoft Store? (default: true)'
        required: false
        default: 'true'
        type: choice
        options:
          - true
          - false

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 180

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PowerShell
        shell: pwsh
        run: |
          $PSVersionTable
          Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"

      - name: Download and Mount Windows ISO
        shell: pwsh
        env:
          ISO_URL_SECRET: ${{ secrets.ISO_URL_WIN10 }}
          ISO_URL_INPUT: ${{ github.event.inputs.iso_url }}
          DEFAULT_ISO_URL: 'https://delivery.massgrave.dev/dbmassgrave/en-us_windows_10_consumer_editions_version_22h2_updated_oct_2025_x64_dvd_38efd00d.iso?t=DKLME7ukdFA2zKNe5LeQB9JdoQeaWrGw&P1=1761921096&P2=601&P3=2&P4=3UJ432ltEo4s9l1ecYNHy5aUeX1gTrPzsAf%2BAESuvsw%3D'
        run: |
          $ErrorActionPreference = 'Stop'

          $isoUrl = $null
          if ($env:ISO_URL_INPUT -and $env:ISO_URL_INPUT.Trim() -ne '') {
            Write-Host "Using ISO URL from workflow input..."
            $isoUrl = $env:ISO_URL_INPUT.Trim()
          } elseif ($env:ISO_URL_SECRET -and $env:ISO_URL_SECRET.Trim() -ne '') {
            Write-Host "Using ISO URL from repository secret (Win10)..."
            $isoUrl = $env:ISO_URL_SECRET.Trim()
          } else {
            Write-Host "ISO URL input is empty, using default Windows 10 ISO URL..."
            $isoUrl = $env:DEFAULT_ISO_URL
          }

          $isoFilePath = "$env:RUNNER_TEMP\\windows10.iso"
          Write-Host "Downloading Windows 10 ISO from: $isoUrl"
          try {
            Invoke-WebRequest -Uri $isoUrl -OutFile $isoFilePath -UseBasicParsing
            Write-Host "✓ ISO downloaded successfully" -ForegroundColor Green
          } catch {
            Write-Error "Failed to download ISO: $_"; exit 1
          }

          if (-not (Test-Path $isoFilePath)) { Write-Error "ISO file not found at: $isoFilePath"; exit 1 }
          $isoSize = (Get-Item $isoFilePath).Length / 1GB
          Write-Host "Downloaded ISO size: $([math]::Round($isoSize, 2)) GB"

          try {
            $mountResult = Mount-DiskImage -ImagePath $isoFilePath -PassThru -ErrorAction Stop
            $volume = $mountResult | Get-Volume
            $isoDriveLetter = $volume.DriveLetter
            if ($isoDriveLetter) {
              $isoDrive = "$isoDriveLetter`:"
              Write-Host "✓ ISO mounted successfully to drive: $isoDrive" -ForegroundColor Green
              echo "ISO_DRIVE=$isoDrive" >> $env:GITHUB_ENV
              echo "ISO_FILE_PATH=$isoFilePath" >> $env:GITHUB_ENV
            } else { Write-Error "Failed to get drive letter from mounted ISO"; exit 1 }
          } catch { Write-Error "Failed to mount ISO: $_"; exit 1 }

      - name: Build Tiny10 ISO
        shell: pwsh
        env:
          BUILD_TYPE: ${{ github.event.inputs.build_type || 'win10' }}
          VERSION_SELECTOR: ${{ github.event.inputs.version_selector || 'Auto' }}
          REMOVE_DEFENDER: ${{ github.event.inputs.remove_defender || 'false' }}
          REMOVE_EDGE: ${{ github.event.inputs.remove_edge || 'true' }}
          REMOVE_STORE: ${{ github.event.inputs.remove_store || 'true' }}
        run: |
          $ErrorActionPreference = 'Continue'

          $isoDrive = $env:ISO_DRIVE
          if (-not $isoDrive) { Write-Error "ISO drive not set."; exit 1 }

          $buildParams = @{}
          if ($isoDrive -match '^([A-Z]):$') { $buildParams['ISO'] = $Matches[1] } else { Write-Error "Invalid ISO drive format: $isoDrive"; exit 1 }
          $buildParams['NonInteractive'] = $true
          $buildParams['VersionSelector'] = if ($env:VERSION_SELECTOR) { $env:VERSION_SELECTOR } else { 'Auto' }

          $buildType = $env:BUILD_TYPE
          if ($buildType -eq 'win10') {
            Write-Host "Debloat options (Win10 maker): Defender=$env:REMOVE_DEFENDER, Edge=$env:REMOVE_EDGE, Store=$env:REMOVE_STORE"
          } else {
            Write-Host "Debloat options are ignored for $buildType (fixed profiles)."
          }
          $scriptName = switch ($buildType) {
            'win10-core' { 'tiny10Coremaker.ps1' }
            'win10-nano' { 'nano10maker.ps1' }
            Default { 'tiny10maker.ps1' }
          }

          Write-Host "Running: $scriptName"
          Write-Host "Parameters: ISO=$($buildParams['ISO']), NonInteractive=$($buildParams['NonInteractive']), VersionSelector=$($buildParams['VersionSelector'])"

          try {
            & ".\\$scriptName" @buildParams 2>&1 | ForEach-Object { Write-Host $_ }
            if ($LASTEXITCODE -ne 0) { Write-Warning "Script exited with code $LASTEXITCODE" }
          } catch { Write-Warning "Error running script: $($_.Exception.Message)" }

          $isoName = switch ($buildType) {
            'win10-core' { 'tiny10-core.iso' }
            'win10-nano' { 'nano10.iso' }
            Default { 'tiny10.iso' }
          }
          $repoRoot = $env:GITHUB_WORKSPACE
          $isoPath = Join-Path $repoRoot $isoName

          if (Test-Path $isoPath) {
            Write-Host "✓ ISO created: $isoPath" -ForegroundColor Green
            $isoSize = (Get-Item $isoPath).Length / 1GB
            Write-Host "ISO size: $([math]::Round($isoSize, 2)) GB"
            exit 0
          } else { Write-Error "ISO was not created at: $isoPath"; exit 1 }

      - name: Upload ISO artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{ github.event.inputs.build_type || 'win10' }}-iso-${{ github.run_number }}
          path: |
            tiny10.iso
            tiny10-core.iso
            nano10.iso
            *.log
          retention-days: 7
          compression-level: 0

      - name: Cleanup
        if: always()
        shell: pwsh
        env:
          ISO_FILE_PATH: ${{ env.ISO_FILE_PATH }}
        run: |
          if ($env:ISO_FILE_PATH) {
            Write-Host "Unmounting ISO: $env:ISO_FILE_PATH"
            try {
              Get-DiskImage | Where-Object { $_.ImagePath -eq $env:ISO_FILE_PATH } | Dismount-DiskImage -ErrorAction Stop
              Write-Host "✓ ISO unmounted successfully" -ForegroundColor Green
            } catch { Write-Warning "Failed to unmount ISO: $_" }
            if ($env:ISO_FILE_PATH -like "*RUNNER_TEMP*") {
              Write-Host "Removing temporary ISO file..."
              Remove-Item -Path $env:ISO_FILE_PATH -Force -ErrorAction SilentlyContinue
            }
          }

