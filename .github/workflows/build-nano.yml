name: Build Nano11 ISO

on:
  workflow_dispatch:
    inputs:
      iso_url:
        description: 'Windows ISO URL (để trống dùng mặc định Windows 11 25H2)'
        required: false
        type: string
      version_selector:
        description: 'Windows edition (Auto/Pro/Home/ProWorkstations)'
        required: false
        default: 'Auto'
        type: choice
        options: [Auto, Pro, Home, ProWorkstations]
      remove_defender:
        description: 'Remove Windows Defender'
        type: boolean
        default: true
        required: false
      remove_ai:
        description: 'Remove AI/Copilot'
        type: boolean
        default: true
        required: false
      remove_edge:
        description: 'Remove Microsoft Edge'
        type: boolean
        default: true
        required: false
      remove_store:
        description: 'Remove Microsoft Store'
        type: boolean
        default: true
        required: false
      remove_printer_drivers:
        description: 'Remove printer drivers'
        type: boolean
        default: true
        required: false
      remove_scanner_drivers:
        description: 'Remove scanner drivers'
        type: boolean
        default: true
        required: false
      remove_bluetooth_drivers:
        description: 'Remove Bluetooth drivers'
        type: boolean
        default: true
        required: false
      remove_smartcard_drivers:
        description: 'Remove smartcard drivers'
        type: boolean
        default: true
        required: false
      remove_tape_drivers:
        description: 'Remove tape drivers'
        type: boolean
        default: true
        required: false
      remove_rdp_drivers:
        description: 'Remove RDP virtual bus drivers'
        type: boolean
        default: true
        required: false
  push:
    branches:
      - main
    paths:
      - '.github/workflows/build-nano.yml'
    branches-ignore:
      - '**'

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve ISO URL
        shell: pwsh
        env:
          INPUT_URL: ${{ github.event.inputs.iso_url || '' }}
        run: |
          $ErrorActionPreference = 'Stop'
          # Mặc định: 25H2 (đừng in full URL ra log)
          $defaultIsoUrl = "https://delivery.massgrave.dev/dbmassgrave/en-us_windows_11_consumer_editions_version_25h2_updated_oct_2025_x64_dvd_97a53aef.iso?t=DKLME7ukdFA2zKNe5LeQB9JdoQeaWrGw&P1=1761921096&P2=601&P3=2&P4=3UJ432ltEo4s9l1ecYNHy5aUeX1gTrPzsAf%2BAESuvsw%3D"
          $isoUrl = if ([string]::IsNullOrWhiteSpace($env:INPUT_URL)) { $defaultIsoUrl } else { $env:INPUT_URL }
          $isoPath = Join-Path $env:RUNNER_TEMP 'windows.iso'
          Write-Host "Downloading ISO to: $isoPath"
          Write-Host "Source: <hidden>"  # tránh lộ URL
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri $isoUrl -OutFile $isoPath -UseBasicParsing
          Add-Content -Path $env:GITHUB_ENV -Value "ISO_FILE_PATH=$isoPath"

      - name: Mount ISO
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $isoFilePath = $env:ISO_FILE_PATH
          if (-not (Test-Path $isoFilePath)) { throw "ISO not found at $isoFilePath" }
          Write-Host "Mounting ISO..."
          $img = Mount-DiskImage -ImagePath $isoFilePath -PassThru -StorageType ISO
          # Đợi driver letter sẵn sàng
          Start-Sleep -Seconds 2
          $vol = ($img | Get-Volume | Where-Object DriveLetter | Select-Object -First 1)
          if (-not $vol -or -not $vol.DriveLetter) { throw "Cannot get mounted drive letter" }
          $isoDrive = "$($vol.DriveLetter):"
          Write-Host "Mounted at $isoDrive"
          Add-Content -Path $env:GITHUB_ENV -Value "ISO_DRIVE=$isoDrive"

      - name: Build Nano11 ISO
        shell: pwsh
        env:
          VERSION_SELECTOR:           ${{ github.event.inputs.version_selector || 'Auto' }}
          REMOVE_DEFENDER:            ${{ github.event.inputs.remove_defender == false && 'false' || 'true' }}
          REMOVE_AI:                  ${{ github.event.inputs.remove_ai == false && 'false' || 'true' }}
          REMOVE_EDGE:                ${{ github.event.inputs.remove_edge == false && 'false' || 'true' }}
          REMOVE_STORE:               ${{ github.event.inputs.remove_store == false && 'false' || 'true' }}
          REMOVE_PRINTER_DRIVERS:     ${{ github.event.inputs.remove_printer_drivers == false && 'false' || 'true' }}
          REMOVE_SCANNER_DRIVERS:     ${{ github.event.inputs.remove_scanner_drivers == false && 'false' || 'true' }}
          REMOVE_BLUETOOTH_DRIVERS:   ${{ github.event.inputs.remove_bluetooth_drivers == false && 'false' || 'true' }}
          REMOVE_SMARTCARD_DRIVERS:   ${{ github.event.inputs.remove_smartcard_drivers == false && 'false' || 'true' }}
          REMOVE_TAPE_DRIVERS:        ${{ github.event.inputs.remove_tape_drivers == false && 'false' || 'true' }}
          REMOVE_RDP_DRIVERS:         ${{ github.event.inputs.remove_rdp_drivers == false && 'false' || 'true' }}
        run: |
          $ErrorActionPreference = 'Stop'
          # Lấy drive ISO (E:, F:, ...)
          $isoDrive = $env:ISO_DRIVE
          if (-not $isoDrive) { throw "ISO_DRIVE not set (mount step failed?)" }
          # Chuẩn hoá tham số cho nano11maker.ps1 (splatting)
          function To-YesNo([string]$v, [string]$def='yes') {
            if ([string]::IsNullOrWhiteSpace($v)) { return $def }
            switch ($v.ToLower()) { 'true' { 'yes' } '1' { 'yes' } 'yes' { 'yes' } default { 'no' } }
          }
          # Extract letter từ "E:" -> "E"
          if ($isoDrive -notmatch '^([A-Z]):$') { throw "Bad ISO_DRIVE format: $isoDrive" }
          $driveLetter = $Matches[1]
          $params = @{
            ISO                = $driveLetter
            NonInteractive     = $true
            VersionSelector    = $env:VERSION_SELECTOR
            RemoveDefender     = To-YesNo $env:REMOVE_DEFENDER
            RemoveAI           = To-YesNo $env:REMOVE_AI
            RemoveEdge         = To-YesNo $env:REMOVE_EDGE
            RemoveStore        = To-YesNo $env:REMOVE_STORE
            RemovePrinterDrivers   = To-YesNo $env:REMOVE_PRINTER_DRIVERS
            RemoveScannerDrivers   = To-YesNo $env:REMOVE_SCANNER_DRIVERS
            RemoveBluetoothDrivers = To-YesNo $env:REMOVE_BLUETOOTH_DRIVERS
            RemoveSmartcardDrivers = To-YesNo $env:REMOVE_SMARTCARD_DRIVERS
            RemoveTapeDrivers      = To-YesNo $env:REMOVE_TAPE_DRIVERS
            RemoveRdpDrivers       = To-YesNo $env:REMOVE_RDP_DRIVERS
          }
          Write-Host "Running nano11maker.ps1 with: ISO=$driveLetter, Version=$($params.VersionSelector)"
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force
          & "$PWD\nano11maker.ps1" @params
          $outIso = Join-Path $PWD 'nano11.iso'
          if (-not (Test-Path $outIso)) { throw "Build failed: nano11.iso not found" }
          $sizeGB = [Math]::Round((Get-Item $outIso).Length / 1GB, 2)
          Write-Host "ISO built: $outIso ($sizeGB GB)"
          Add-Content -Path $env:GITHUB_ENV -Value "OUTPUT_ISO=$outIso"

      - name: Upload ISO artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nano11.iso
          path: nano11.iso
          retention-days: 1
          if-no-files-found: error

      - name: Unmount & cleanup
        if: always()
        shell: pwsh
        run: |
          try {
            if ($env:ISO_FILE_PATH) {
              $img = Get-DiskImage | Where-Object { $_.ImagePath -eq $env:ISO_FILE_PATH }
              if ($img) { Dismount-DiskImage -ImagePath $env:ISO_FILE_PATH -ErrorAction SilentlyContinue }
              Remove-Item -Path $env:ISO_FILE_PATH -Force -ErrorAction SilentlyContinue
              Write-Host "Unmounted and removed temp ISO"
            }
          } catch {
            Write-Warning $_
          }
