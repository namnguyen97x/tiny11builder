name: Build Nano11 ISO

on:
  workflow_dispatch:
    inputs:
      iso_url:
        description: 'Windows ISO URL (leave empty to use default Windows 11 25H2 ISO)'
        required: false
        type: string
      version_selector:
        description: 'Windows edition to build (default: Auto - selects Pro)'
        required: false
        default: 'Auto'
        type: choice
        options:
          - Auto
          - Pro
          - Home
          - ProWorkstations
      remove_defender:
        description: 'Remove Windows Defender'
        required: false
        default: true
        type: boolean
      remove_ai:
        description: 'Remove AI/Copilot components'
        required: false
        default: true
        type: boolean
      remove_edge:
        description: 'Remove Microsoft Edge browser'
        required: false
        default: true
        type: boolean
      remove_store:
        description: 'Remove Microsoft Store'
        required: false
        default: true
        type: boolean
      remove_printer_drivers:
        description: 'Remove printer drivers'
        required: false
        default: true
        type: boolean
      remove_scanner_drivers:
        description: 'Remove scanner and multifunction device drivers'
        required: false
        default: true
        type: boolean
      remove_bluetooth_drivers:
        description: 'Remove Bluetooth drivers (unchecked = KEPT to preserve Bluetooth functionality)'
        required: false
        default: false
        type: boolean
      remove_smartcard_drivers:
        description: 'Remove smartcard reader drivers'
        required: false
        default: true
        type: boolean
      remove_tape_drivers:
        description: 'Remove tape drive drivers'
        required: false
        default: true
        type: boolean
      remove_rdp_drivers:
        description: 'Remove Remote Desktop virtual bus drivers'
        required: false
        default: true
        type: boolean

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Windows ISO
        id: download_iso
        shell: pwsh
        env:
          ISO_URL: ${{ github.event.inputs.iso_url || '' }}
        run: |
          $ErrorActionPreference = 'Stop'
          
          # Default ISO URL (Windows 11 25H2 Oct 2025)
          $defaultIsoUrl = "https://delivery.massgrave.dev/dbmassgrave/en-us_windows_11_consumer_editions_version_25h2_updated_oct_2025_x64_dvd_97a53aef.iso?t=DKLME7ukdFA2zKNe5LeQB9JdoQeaWrGw&P1=1761921096&P2=601&P3=2&P4=3UJ432ltEo4s9l1ecYNHy5aUeX1gTrPzsAf%2BAESuvsw%3D"
          
          if ([string]::IsNullOrWhiteSpace($env:ISO_URL)) {
            Write-Host "Using default Windows 11 25H2 ISO URL..."
            $isoUrl = $defaultIsoUrl
          } else {
            Write-Host "Using custom ISO URL: $env:ISO_URL"
            $isoUrl = $env:ISO_URL
          }
          
          $isoPath = "$env:RUNNER_TEMP\windows.iso"
          Write-Host "Downloading ISO from: $isoUrl"
          Write-Host "Destination: $isoPath"
          
          try {
            $ProgressPreference = 'SilentlyContinue'
            Invoke-WebRequest -Uri $isoUrl -OutFile $isoPath -UseBasicParsing
            Write-Host "✓ ISO downloaded successfully"
            echo "ISO_FILE_PATH=$isoPath" >> $env:GITHUB_ENV
          } catch {
            Write-Error "Failed to download ISO: $_"
            exit 1
          }

      - name: Mount ISO
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $isoFilePath = $env:ISO_FILE_PATH
          
          if (-not $isoFilePath -or -not (Test-Path $isoFilePath)) {
            Write-Error "ISO file not found at: $isoFilePath"
            exit 1
          }
          
          Write-Host "Mounting ISO: $isoFilePath"
          try {
            $diskImage = Mount-DiskImage -ImagePath $isoFilePath -PassThru -StorageType ISO
            $disk = Get-Disk | Where-Object { $_.Number -eq $diskImage.Number }
            $volume = Get-Volume -DiskNumber $disk.Number | Where-Object { $_.DriveLetter }
            
            if ($volume.DriveLetter) {
              $isoDrive = "$($volume.DriveLetter):"
              Write-Host "✓ ISO mounted to: $isoDrive"
              echo "ISO_DRIVE=$isoDrive" >> $env:GITHUB_ENV
              echo "ISO_FILE_PATH=$isoFilePath" >> $env:GITHUB_ENV
            } else {
              Write-Error "Failed to get drive letter from mounted ISO"
              exit 1
            }
          } catch {
            Write-Error "Failed to mount ISO: $_"
            exit 1
          }
          
      - name: Build Nano11 ISO
        shell: pwsh
        env:
          VERSION_SELECTOR: ${{ github.event.inputs.version_selector || 'Auto' }}
          REMOVE_DEFENDER: ${{ github.event.inputs.remove_defender || 'true' }}
          REMOVE_AI: ${{ github.event.inputs.remove_ai || 'true' }}
          REMOVE_EDGE: ${{ github.event.inputs.remove_edge || 'true' }}
          REMOVE_STORE: ${{ github.event.inputs.remove_store || 'true' }}
          REMOVE_PRINTER_DRIVERS: ${{ github.event.inputs.remove_printer_drivers || 'true' }}
          REMOVE_SCANNER_DRIVERS: ${{ github.event.inputs.remove_scanner_drivers || 'true' }}
          REMOVE_BLUETOOTH_DRIVERS: ${{ github.event.inputs.remove_bluetooth_drivers || 'false' }}
          REMOVE_SMARTCARD_DRIVERS: ${{ github.event.inputs.remove_smartcard_drivers || 'true' }}
          REMOVE_TAPE_DRIVERS: ${{ github.event.inputs.remove_tape_drivers || 'true' }}
          REMOVE_RDP_DRIVERS: ${{ github.event.inputs.remove_rdp_drivers || 'true' }}
        run: |
          # Set error handling - continue on non-critical errors
          $ErrorActionPreference = 'Continue'
          $script:buildFailed = $false
          $script:buildError = $null
          
          # Get ISO drive from mounted ISO
          $isoDrive = $env:ISO_DRIVE
          if (-not $isoDrive) {
            Write-Error "ISO drive not set. Mount step may have failed."
            exit 1
          }
          
          Write-Host "Building Nano11 ISO..."
          Write-Host "ISO Drive: $isoDrive"
          Write-Host "Build Type: nano"
          
          # Build arguments - use hashtable for named parameters
          $buildParams = @{}
          
          # Extract drive letter (remove colon)
          if ($isoDrive -match '^([A-Z]):$') {
            $buildParams['ISO'] = $Matches[1]
          } else {
            Write-Error "Invalid ISO drive format: $isoDrive"
            exit 1
          }
          
          # Add NonInteractive flag for CI/CD
          $buildParams['NonInteractive'] = $true
          
          # Add version selector
          $versionSelector = if ($env:VERSION_SELECTOR) { $env:VERSION_SELECTOR } else { 'Auto' }
          $buildParams['VersionSelector'] = $versionSelector
          Write-Host "Version selector: $versionSelector"
          
          # Helper function to convert boolean/string to yes/no
          function Convert-ToYesNo {
            param($value, $default = 'yes')
            if (-not $value) { return $default }
            $str = $value.ToString().ToLower()
            if ($str -eq 'true' -or $str -eq '1' -or $str -eq 'yes') { return 'yes' }
            return 'no'
          }
          
          # Add debloat parameters
          Write-Host "Adding debloat parameters..."
          $buildParams['RemoveDefender'] = Convert-ToYesNo $env:REMOVE_DEFENDER 'yes'
          $buildParams['RemoveAI'] = Convert-ToYesNo $env:REMOVE_AI 'yes'
          $buildParams['RemoveEdge'] = Convert-ToYesNo $env:REMOVE_EDGE 'yes'
          $buildParams['RemoveStore'] = Convert-ToYesNo $env:REMOVE_STORE 'yes'
          
          # Add driver removal parameters
          Write-Host "Adding driver removal parameters..."
          $buildParams['RemovePrinterDrivers'] = Convert-ToYesNo $env:REMOVE_PRINTER_DRIVERS 'yes'
          $buildParams['RemoveScannerDrivers'] = Convert-ToYesNo $env:REMOVE_SCANNER_DRIVERS 'yes'
          $buildParams['RemoveBluetoothDrivers'] = Convert-ToYesNo $env:REMOVE_BLUETOOTH_DRIVERS 'no'
          $buildParams['RemoveSmartcardDrivers'] = Convert-ToYesNo $env:REMOVE_SMARTCARD_DRIVERS 'yes'
          $buildParams['RemoveTapeDrivers'] = Convert-ToYesNo $env:REMOVE_TAPE_DRIVERS 'yes'
          $buildParams['RemoveRdpDrivers'] = Convert-ToYesNo $env:REMOVE_RDP_DRIVERS 'yes'
          
          Write-Host "Debloat: Defender=$($buildParams['RemoveDefender']), AI=$($buildParams['RemoveAI']), Edge=$($buildParams['RemoveEdge']), Store=$($buildParams['RemoveStore'])"
          Write-Host "Drivers: Printer=$($buildParams['RemovePrinterDrivers']), Scanner=$($buildParams['RemoveScannerDrivers']), Bluetooth=$($buildParams['RemoveBluetoothDrivers']), Smartcard=$($buildParams['RemoveSmartcardDrivers']), Tape=$($buildParams['RemoveTapeDrivers']), RDP=$($buildParams['RemoveRdpDrivers'])"
          
          Write-Host "Running: nano11maker.ps1"
          Write-Host "Parameters: ISO=$($buildParams['ISO']), NonInteractive=$($buildParams['NonInteractive']), VersionSelector=$($buildParams['VersionSelector'])"
          
          # Run the builder script with splatting
          try {
            & ".\nano11maker.ps1" @buildParams 2>&1 | ForEach-Object {
              if ($_ -match "Removal failed|Warning.*Failed to remove") {
                Write-Warning $_
              } else {
                Write-Host $_
              }
            }
            
            # Check exit code
            if ($LASTEXITCODE -ne 0) {
              Write-Warning "Script exited with code $LASTEXITCODE, but continuing to check for ISO..."
            }
          } catch {
            $script:buildFailed = $true
            $script:buildError = $_.Exception.Message
            Write-Error "Build script error: $_"
          }
          
          # Check for output ISO
          $isoOutput = "$PSScriptRoot\nano11.iso"
          if (Test-Path $isoOutput) {
            Write-Host "✓ Build completed successfully! ISO found at: $isoOutput" -ForegroundColor Green
            $isoSize = (Get-Item $isoOutput).Length / 1GB
            Write-Host "  ISO size: $([math]::Round($isoSize, 2)) GB"
          } else {
            Write-Error "Build failed: ISO not found at expected path: $isoOutput"
            if ($script:buildFailed) {
              Write-Error "Build script error: $($script:buildError)"
            }
            exit 1
          }

      - name: Upload ISO artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nano11.iso
          path: nano11.iso
          retention-days: 1
          if-no-files-found: error

      - name: Unmount ISO
        if: always()
        shell: pwsh
        run: |
          # Unmount ISO if we mounted it
          if ($env:ISO_FILE_PATH) {
            Write-Host "Unmounting ISO: $env:ISO_FILE_PATH"
            try {
              Get-DiskImage | Where-Object { $_.ImagePath -eq $env:ISO_FILE_PATH } | Dismount-DiskImage -ErrorAction Stop
              Write-Host "✓ ISO unmounted successfully" -ForegroundColor Green
            } catch {
              Write-Warning "Failed to unmount ISO: $_"
            }
            
            # Cleanup temporary ISO file if it was downloaded
            if ($env:ISO_FILE_PATH -like "*RUNNER_TEMP*") {
              Write-Host "Removing temporary ISO file..."
              Remove-Item -Path $env:ISO_FILE_PATH -Force -ErrorAction SilentlyContinue
            }
          }

