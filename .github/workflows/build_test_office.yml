name: Build Tiny11 + Office (Test)

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (maker/core/nano)'
        required: true
        default: 'maker'
        type: choice
        options: [maker, core, nano]
      version_selector:
        description: 'Windows edition to build'
        required: false
        default: 'Auto'
        type: choice
        options: [Auto, Pro, Home, ProWorkstations]
      office_mode:
        description: 'Office payload mode (mock/download ODT only)'
        required: false
        default: 'mock'
        type: choice
        options: [mock, download]

jobs:
  build_base:
    uses: ./.github/workflows/build.yml
    secrets: inherit
    with:
      build_type: ${{ inputs.build_type }}
      version_selector: ${{ inputs.version_selector }}

  office_stage:
    runs-on: windows-latest
    needs: build_base
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download ISO artifact(s)
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}\iso_artifacts

      - name: Find ISO file
        shell: pwsh
        run: |
          $root = Join-Path $env:RUNNER_TEMP 'iso_artifacts'
          $iso = Get-ChildItem -Path $root -Recurse -Filter *.iso | Select-Object -First 1
          if (-not $iso) { Write-Error 'No ISO file found in downloaded artifacts.'; exit 1 }
          Write-Host "ISO found: $($iso.FullName)"
          echo "BUILT_ISO=$($iso.FullName)" >> $env:GITHUB_ENV

      - name: Extract ISO to working folder
        shell: pwsh
        run: |
          $iso = $env:BUILT_ISO
          $work = Join-Path $env:RUNNER_TEMP 'iso_work'
          New-Item -ItemType Directory -Force -Path $work | Out-Null
          $img = Mount-DiskImage -ImagePath $iso -PassThru
          try {
            $vol = $img | Get-Volume
            if (-not $vol.DriveLetter) { throw 'No drive letter after mount' }
            $src = "$($vol.DriveLetter):\"
            robocopy $src $work /E /NFL /NDL /NJH /NJS /NP | Out-Null
            echo "ISO_EXTRACT_DIR=$work" >> $env:GITHUB_ENV
          } finally {
            Dismount-DiskImage -ImagePath $iso -ErrorAction SilentlyContinue
          }

      - name: Stage Office LTSC 2021 ($OEM$)
        shell: pwsh
        run: |
          $dir = $env:ISO_EXTRACT_DIR
          ./tools/StageOfficeToIsoFolder.ps1 -IsoExtractDir $dir -OfficeMode '${{ inputs.office_mode }}'

      - name: Try to rebuild ISO with oscdimg (if available)
        shell: pwsh
        run: |
          $dir = $env:ISO_EXTRACT_DIR
          $out = Join-Path $env:GITHUB_WORKSPACE 'tiny11-office.iso'
          $oscdimg = (Get-Command oscdimg.exe -ErrorAction SilentlyContinue).Path
          if ($oscdimg) {
            Write-Host "Found oscdimg at: $oscdimg"
            $efi = Join-Path $dir 'efi\microsoft\boot\efisys.bin'
            $boot = Join-Path $dir 'boot\etfsboot.com'
            $args = @('-m','-u2','-udfver102')
            if (Test-Path $boot) { $args += @('-b', $boot) }
            if (Test-Path $efi)  { $args += @('-bootdata:2#p0,e,b' + $boot + '#pEF,e,b' + $efi) }
            $args += @($dir, $out)
            & $oscdimg @args
            if (Test-Path $out) {
              Write-Host "Rebuilt ISO: $out"
              echo "FINAL_ISO=$out" >> $env:GITHUB_ENV
              exit 0
            }
          }
          Write-Warning 'oscdimg not available or rebuild failed. Uploading extracted folder instead.'
          echo "FINAL_ISO=" >> $env:GITHUB_ENV

      - name: Upload result
        uses: actions/upload-artifact@v4
        with:
          name: tiny11-office-${{ github.run_number }}
          path: |
            ${{ env.FINAL_ISO }}
            ${{ env.ISO_EXTRACT_DIR }}\sources\$OEM$\**
          if-no-files-found: warn
          retention-days: 7

