name: Build Nano11 ISO

on:
  workflow_dispatch:
    inputs:
      iso_url:
        description: 'Windows ISO URL (leave empty to use default Windows 11 25H2 ISO)'
        required: false
        type: string
      version_selector:
        description: 'Windows edition to build (default: Auto - selects Pro)'
        required: false
        default: 'Auto'
        type: choice
        options:
          - Auto
          - Pro
          - Home
          - ProWorkstations
      remove_defender:
        description: 'Remove Windows Defender'
        required: false
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      remove_ai:
        description: 'Remove AI/Copilot components'
        required: false
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      remove_edge:
        description: 'Remove Microsoft Edge browser'
        required: false
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      remove_store:
        description: 'Remove Microsoft Store'
        required: false
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      remove_printer_drivers:
        description: 'Remove printer drivers'
        required: false
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      remove_scanner_drivers:
        description: 'Remove scanner drivers'
        required: false
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      remove_bluetooth_drivers:
        description: 'Remove Bluetooth drivers'
        required: false
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      remove_smartcard_drivers:
        description: 'Remove smartcard drivers'
        required: false
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      remove_tape_drivers:
        description: 'Remove tape drivers'
        required: false
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      remove_rdp_drivers:
        description: 'Remove RDP virtual bus drivers'
        required: false
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 180
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup PowerShell
        shell: pwsh
        run: |
          $PSVersionTable
          Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
          
      - name: Download and Mount Windows ISO
        shell: pwsh
        env:
          ISO_URL_SECRET: ${{ secrets.ISO_URL }}
          ISO_URL_INPUT: ${{ github.event.inputs.iso_url }}
          DEFAULT_ISO_URL: 'https://delivery.massgrave.dev/dbmassgrave/en-us_windows_11_consumer_editions_version_25h2_updated_oct_2025_x64_dvd_97a53aef.iso?t=DKLME7ukdFA2zKNe5LeQB9JdoQeaWrGw&P1=1761921096&P2=601&P3=2&P4=3UJ432ltEo4s9l1ecYNHy5aUeX1gTrPzsAf%2BAESuvsw%3D'
        run: |
          $ErrorActionPreference = 'Stop'
          
          # Determine ISO source
          # Priority: Input ISO_URL (if not empty) > Secret ISO_URL > Default URL
          $isoUrl = $null
          
          # Check if ISO_URL_INPUT is provided and not empty
          if ($env:ISO_URL_INPUT -and $env:ISO_URL_INPUT.Trim() -ne '') {
            Write-Host "Using ISO URL from workflow input..."
            $isoUrl = $env:ISO_URL_INPUT.Trim()
          } elseif ($env:ISO_URL_SECRET -and $env:ISO_URL_SECRET.Trim() -ne '') {
            Write-Host "Using ISO URL from repository secret..."
            $isoUrl = $env:ISO_URL_SECRET.Trim()
          } else {
            Write-Host "ISO URL input is empty, using default Windows 11 25H2 ISO URL..."
            $isoUrl = $env:DEFAULT_ISO_URL
          }
          
          $isoFilePath = "$env:RUNNER_TEMP\windows.iso"
          
          Write-Host "Downloading Windows ISO from: $isoUrl"
          Write-Host "This may take a while depending on your connection speed..."
          
          try {
            $ProgressPreference = 'SilentlyContinue'
            Invoke-WebRequest -Uri $isoUrl -OutFile $isoFilePath -UseBasicParsing
            Write-Host "✓ ISO downloaded successfully" -ForegroundColor Green
          } catch {
            Write-Error "Failed to download ISO: $_"
            exit 1
          }
          
          # Verify ISO file exists
          if (-not (Test-Path $isoFilePath)) {
            Write-Error "ISO file not found at: $isoFilePath"
            exit 1
          }
          
          $isoSize = (Get-Item $isoFilePath).Length / 1GB
          Write-Host "Downloaded ISO size: $([math]::Round($isoSize, 2)) GB"
          
          Write-Host "Mounting ISO file: $isoFilePath"
          
          # Mount ISO and get drive letter
          try {
            $mountResult = Mount-DiskImage -ImagePath $isoFilePath -PassThru -ErrorAction Stop
            $volume = $mountResult | Get-Volume
            $isoDriveLetter = $volume.DriveLetter
            
            if ($isoDriveLetter) {
              $isoDrive = "$isoDriveLetter`:"
              Write-Host "✓ ISO mounted successfully to drive: $isoDrive" -ForegroundColor Green
              echo "ISO_DRIVE=$isoDrive" >> $env:GITHUB_ENV
              echo "ISO_FILE_PATH=$isoFilePath" >> $env:GITHUB_ENV
            } else {
              Write-Error "Failed to get drive letter from mounted ISO"
              exit 1
            }
          } catch {
            Write-Error "Failed to mount ISO: $_"
            exit 1
          }
          
      - name: Build Nano11 ISO
        shell: pwsh
        env:
          VERSION_SELECTOR: ${{ github.event.inputs.version_selector || 'Auto' }}
          REMOVE_DEFENDER: ${{ github.event.inputs.remove_defender || 'yes' }}
          REMOVE_AI: ${{ github.event.inputs.remove_ai || 'yes' }}
          REMOVE_EDGE: ${{ github.event.inputs.remove_edge || 'yes' }}
          REMOVE_STORE: ${{ github.event.inputs.remove_store || 'yes' }}
          REMOVE_PRINTER_DRIVERS: ${{ github.event.inputs.remove_printer_drivers || 'yes' }}
          REMOVE_SCANNER_DRIVERS: ${{ github.event.inputs.remove_scanner_drivers || 'yes' }}
          REMOVE_BLUETOOTH_DRIVERS: ${{ github.event.inputs.remove_bluetooth_drivers || 'yes' }}
          REMOVE_SMARTCARD_DRIVERS: ${{ github.event.inputs.remove_smartcard_drivers || 'yes' }}
          REMOVE_TAPE_DRIVERS: ${{ github.event.inputs.remove_tape_drivers || 'yes' }}
          REMOVE_RDP_DRIVERS: ${{ github.event.inputs.remove_rdp_drivers || 'yes' }}
        run: |
          # Set error handling - continue on non-critical errors
          $ErrorActionPreference = 'Continue'
          $script:buildFailed = $false
          $script:buildError = $null
          
          # Get ISO drive from mounted ISO
          $isoDrive = $env:ISO_DRIVE
          if (-not $isoDrive) {
            Write-Error "ISO drive not set. Mount step may have failed."
            exit 1
          }
          
          Write-Host "Building Nano11 ISO..."
          Write-Host "ISO Drive: $isoDrive"
          Write-Host "Build Type: nano"
          
          # Build arguments - use hashtable for named parameters
          $buildParams = @{}
          
          # Extract drive letter (remove colon)
          if ($isoDrive -match '^([A-Z]):$') {
            $buildParams['ISO'] = $Matches[1]
          } else {
            Write-Error "Invalid ISO drive format: $isoDrive"
            exit 1
          }
          
          # Add NonInteractive flag for CI/CD
          $buildParams['NonInteractive'] = $true
          
          # Add version selector
          $versionSelector = if ($env:VERSION_SELECTOR) { $env:VERSION_SELECTOR } else { 'Auto' }
          $buildParams['VersionSelector'] = $versionSelector
          Write-Host "Version selector: $versionSelector"
          
          # Helper function to convert string to yes/no
          function Convert-ToYesNo {
            param($value, $default = 'yes')
            if (-not $value) { return $default }
            $str = $value.ToString().ToLower()
            if ($str -eq 'yes' -or $str -eq 'true' -or $str -eq '1') { return 'yes' }
            return 'no'
          }
          
          # Add debloat parameters
          Write-Host "Adding debloat parameters..."
          $buildParams['RemoveDefender'] = Convert-ToYesNo $env:REMOVE_DEFENDER 'yes'
          $buildParams['RemoveAI'] = Convert-ToYesNo $env:REMOVE_AI 'yes'
          $buildParams['RemoveEdge'] = Convert-ToYesNo $env:REMOVE_EDGE 'yes'
          $buildParams['RemoveStore'] = Convert-ToYesNo $env:REMOVE_STORE 'yes'
          
          # Add driver removal parameters
          Write-Host "Adding driver removal parameters..."
          $buildParams['RemovePrinterDrivers'] = Convert-ToYesNo $env:REMOVE_PRINTER_DRIVERS 'yes'
          $buildParams['RemoveScannerDrivers'] = Convert-ToYesNo $env:REMOVE_SCANNER_DRIVERS 'yes'
          $buildParams['RemoveBluetoothDrivers'] = Convert-ToYesNo $env:REMOVE_BLUETOOTH_DRIVERS 'yes'
          $buildParams['RemoveSmartcardDrivers'] = Convert-ToYesNo $env:REMOVE_SMARTCARD_DRIVERS 'yes'
          $buildParams['RemoveTapeDrivers'] = Convert-ToYesNo $env:REMOVE_TAPE_DRIVERS 'yes'
          $buildParams['RemoveRdpDrivers'] = Convert-ToYesNo $env:REMOVE_RDP_DRIVERS 'yes'
          
          Write-Host "Debloat: Defender=$($buildParams['RemoveDefender']), AI=$($buildParams['RemoveAI']), Edge=$($buildParams['RemoveEdge']), Store=$($buildParams['RemoveStore'])"
          Write-Host "Drivers: Printer=$($buildParams['RemovePrinterDrivers']), Scanner=$($buildParams['RemoveScannerDrivers']), Bluetooth=$($buildParams['RemoveBluetoothDrivers']), Smartcard=$($buildParams['RemoveSmartcardDrivers']), Tape=$($buildParams['RemoveTapeDrivers']), RDP=$($buildParams['RemoveRdpDrivers'])"
          
          Write-Host "Running: nano11maker.ps1"
          Write-Host "Parameters: ISO=$($buildParams['ISO']), NonInteractive=$($buildParams['NonInteractive']), VersionSelector=$($buildParams['VersionSelector'])"
          
          # Run the builder script with splatting
          # Catch errors but continue - scripts have their own error handling
          try {
            & ".\nano11maker.ps1" @buildParams 2>&1 | ForEach-Object {
              if ($_ -match "Removal failed|Warning.*Failed to remove") {
                Write-Warning $_
              } else {
                Write-Host $_
              }
            }
            
            # Check exit code
            if ($LASTEXITCODE -ne 0) {
              Write-Warning "Script exited with code $LASTEXITCODE, but continuing to check for ISO..."
            }
          } catch {
            Write-Warning "Error running script: $($_.Exception.Message)"
            $script:buildFailed = $true
            $script:buildError = $_
          }
          
          # Check if ISO was created
          $isoName = 'nano11.iso'
          # Use repository workspace, not $PSScriptRoot (which points to a temp script path in GitHub Actions)
          $repoRoot = $env:GITHUB_WORKSPACE
          $isoPath = Join-Path $repoRoot $isoName
          
          if (Test-Path $isoPath) {
            Write-Host "✓ ISO created successfully: $isoPath" -ForegroundColor Green
            $isoSize = (Get-Item $isoPath).Length / 1GB
            Write-Host "ISO size: $([math]::Round($isoSize, 2)) GB"
            # Exit successfully even if there were warnings
            exit 0
          } else {
            Write-Error "ISO was not created at expected path: $isoPath"
            if ($script:buildError) {
              Write-Error "Build error: $($script:buildError.Exception.Message)"
            }
            exit 1
          }
          
      - name: Upload ISO artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: nano11-iso-${{ github.run_number }}
          path: nano11.iso
          retention-days: 7
          compression-level: 0
          
      - name: Cleanup
        if: always()
        shell: pwsh
        env:
          ISO_FILE_PATH: ${{ env.ISO_FILE_PATH }}
        run: |
          # Unmount ISO if we mounted it
          if ($env:ISO_FILE_PATH) {
            Write-Host "Unmounting ISO: $env:ISO_FILE_PATH"
            try {
              Get-DiskImage | Where-Object { $_.ImagePath -eq $env:ISO_FILE_PATH } | Dismount-DiskImage -ErrorAction Stop
              Write-Host "✓ ISO unmounted successfully" -ForegroundColor Green
            } catch {
              Write-Warning "Failed to unmount ISO: $_"
            }
            
            # Cleanup temporary ISO file if it was downloaded
            if ($env:ISO_FILE_PATH -like "*RUNNER_TEMP*") {
              Write-Host "Removing temporary ISO file..."
              Remove-Item -Path $env:ISO_FILE_PATH -Force -ErrorAction SilentlyContinue
            }
          }

